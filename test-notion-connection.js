const { Client } = require('@notionhq/client');

const NOTION_TOKEN = process.env.NOTION_TOKEN;
const NOTION_PARENT_PAGE_ID = process.env.NOTION_PARENT_PAGE_ID;

if (!NOTION_TOKEN || !NOTION_PARENT_PAGE_ID) {
  console.error('‚ùå Faltam vari√°veis de ambiente!');
  console.log('NOTION_TOKEN:', NOTION_TOKEN ? '‚úÖ Configurado' : '‚ùå Faltando');
  console.log('NOTION_PARENT_PAGE_ID:', NOTION_PARENT_PAGE_ID ? '‚úÖ Configurado' : '‚ùå Faltando');
  process.exit(1);
}

const notion = new Client({ auth: NOTION_TOKEN });

async function test() {
  try {
    console.log('üîç Testando conex√£o com Notion...\n');

    // Testar se consegue acessar a p√°gina pai
    console.log('1Ô∏è‚É£ Verificando acesso √† p√°gina pai...');
    const page = await notion.pages.retrieve({ page_id: NOTION_PARENT_PAGE_ID });
    const title = page.properties?.title?.title?.[0]?.plain_text || 'Sem t√≠tulo';
    console.log('‚úÖ P√°gina encontrada:', title);

    // Listar p√°ginas filhas
    console.log('\n2Ô∏è‚É£ Listando p√°ginas filhas...');
    const children = await notion.blocks.children.list({
      block_id: NOTION_PARENT_PAGE_ID,
      page_size: 100
    });
    console.log(`üìÑ Encontrados ${children.results.length} blocos/p√°ginas filhos`);

    // Buscar p√°ginas filhas (que s√£o do tipo child_page)
    const childPages = children.results.filter(block => block.type === 'child_page');
    console.log(`üìë P√°ginas filhas: ${childPages.length}`);
    childPages.forEach((page, i) => {
      const pageTitle = page.child_page?.title || 'Sem t√≠tulo';
      console.log(`   ${i+1}. ${pageTitle}`);
    });

    console.log('\n‚úÖ Conex√£o OK! Script pode criar p√°ginas.');

  } catch (error) {
    console.error('\n‚ùå Erro:', error.message);
    if (error.code === 'object_not_found') {
      console.log('\nüí° Poss√≠veis causas:');
      console.log('   - A p√°gina n√£o existe');
      console.log('   - A integra√ß√£o n√£o tem acesso √† p√°gina');
      console.log('   - O ID est√° incorreto');
    }
  }
}

test();
